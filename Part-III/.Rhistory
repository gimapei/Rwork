ls
ls
ls
ls()
num <- 10
string <- '이순'
string <- '이순신'
boolean <- TRUE
mode(num)
mode(string)
mode(boolean)
is.numeric(num)
is.character(num)
is.double(string)
mode(num)
class(num)
class(name2)
no <- c(1:5)
name <- c('a1','a2','a3','a4','a5')
no; name
emp <- data.frame(NO=no,NAME=name)
emp
mode(emp)
class(emp)
sum(10,20,30)
sum(5,4,3,2,NA)
sum(5,4,3,2,NA)
sum(5,4,3,2,NA, na.rm = T)
x <- c(1,2,3)
x <- c('1','2','3')
result <- x * 3
result <- x * 3  # error
xx <- as.numeric(x)
result <= xx * 3
result <- xx * 3
result <- xx * 3
result <- xx * 3
result
# 6) factor형 : 동일한 값을 범주로 갖는 Vector(하나의 변수에 1개 이상의 값을 가진변수, Array같은거)
gender <- c('m','f','m','m','f')
gender
man <- as.factor(gender)
man
plot(gender)
plot(gender) # error
man
plot(gender)
fgender <- as.factor(gender)
fgender
plot(fgender)
str(fgender)
class(fgender)
mode(fgender)
str(fgender)
fgender
Ogender <- factor(gender, levels=c('f','m'), labels=c('woman','man'))
Ogender
plot(Ogenger)
Ogender
Ogender <- factor(gender, levels=c('f','m'), labels=c('woman','man'))
plot(Ogenger)
plot(Ogender)
install.packages('stringr')
search()
library(string) # 패키지를 메모리에 올리는 명
library(stringr) # 패키지를 메모리에 올리는 명
search()
str_extract_all('홍길동34이순신35','[0-9]{2}')
str_extract_all('홍길동34이순신35','[a-zA-Z]{3}') #
str_extract_all('홍길동34이순신35','[가-히]{3}') #
str_extract_all('홍길동34이순신35','[가-히]{3}') # [1] "홍길동" "이순신"
data()
data(EuStockMarkets)
EuStockMarkets
EuStockMarkets[1:20]
str(EuStockMarkets)
hist(EuStockMarkets)
?sum
help(sum)
help(mean)  # sum(..., na.rm = FALSE)
mean(10,20,30)
x <- c(10,20,30)
mean(x)
getwd()
setwd('C:/Rwork/Part-I')
getwd() # [1] "C:/Rwork"
setwd('C:/Rwork')
filedata <- read.csv('c:/Rwork/Part-I/test.csv', header=T)
filedata
filedata <- read.csv('c:/Rwork/Part-I/test.csv', header=T) # 기본폴더에서 가져올때는 그냥 파일명만 명시해도 된다.
filedata
data$type2[data$type== 1] <-"국립"
setwd("c:/Rwork/Part-III")
data <- read.csv("descriptive.csv", header=TRUE)
head(data)
str(data)
data$type2[data$type== 1] <-"국립"
data$type2[data$type== 2] <-"사립"
str(data)
head(data)
data$pass2[data$pass== 1] <-"합격"
data$pass2[data$pass== 2] <-"불합격"
str(data)
head(data)
table(data$type2)
barplot(type2_)
type2_ <- table(data$type2)
barplot(type2_)
age <- data$age
range(age)
mean(age)
ad(age)
library(moments)
skewness(age)
kurtosis(age)
hist(age)
type2_ <- table(data$type2)
barplot(type2_)
pass2_ <- table(data$pass2)
pichart(pass2_)
pie(pass2_)
barplot(type2_)
pie(pass2_)
setwd("c:/Rwork/Part-III")
data <- read.csv("cleanDescriptive.csv", header=TRUE)
data # 확인
head(data) # 변수 확인
# 2) 변수 추출
x <- data$level2 # 리코딩 변수 이용
y <- data$pass2 # 리코딩 변수 이용
x; y # 부모학력수준(x), 자녀대학진학여부(y)
# 3) 데이터프레임 생성
# 변수 모델링 : 부모학력수준(독립변수:x) -> 자녀진학여부(종속변수:y)
# 형식 : data.frame(명목척도=x, 명목척도=y)
result <- data.frame(Level=x, Pass=y) # 데이터 프레임 생성 - 데이터 묶음
dim(result) # 차원보기
# 2. 교차분석
# - 교차분할표를 통해서 범주형 변수의 관계를 분석하는 방법
# 1) 교차분할표 생성
table(result) # 빈도보기
# 2) package를 이용한 교차분할표 생성
install.packages("gmodels") # gmodels 패키지 설치
library(gmodels) # CrossTable() 함수 사용
# 3) diamond의 cut과 color에 대한 교차분할표 생성
install.packages("ggplot2") # diamonds 데이터 셋 사용을 위한 패키지 설치
library(ggplot2)
CrossTable(x=diamonds$color, y=diamonds$cut)
data$level2
x <- data$level2
y <- data$pass2
CrossTable(x=parents,y=children)
CrossTable(x=parents,y=children)
CrossTable(x,y)
chisq.test(c(4,6,17,16,8,9))
data <- textConnection(
"스포츠음료종류  관측도수
1   41
2   30
3   51
4   71
5   61
")
x <- read.table(data, header=T)
x # 스포츠음료종류 관측도수
chisq.test(x$관측도수)
# 1. 파일 가져오기
setwd("c:/Rwork/Part-III")
data <- read.csv("homogenity.csv", header=TRUE)
head(data)
# method와 survery 변수만 서브셋 생성
data <- subset(data, !is.na(survey), c(method, survey))
# 2. 변수리코딩 - 코딩 변경
# method: 1:방법1, 2:방법2, 3:방법3
# survey: 1:매우만족, 2:만족, 3:보통, 4: 불만족, 5: 매우불만족
# 교육방법2 필드 추가
data$method2[data$method==1] <- "방법1"
data$method2[data$method==2] <- "방법2"
data$method2[data$method==3] <- "방법3"
# 만족도2 필드 추가
data$survey2[data$survey==1] <- "매우만족"
data$survey2[data$survey==2] <- "만족"
data$survey2[data$survey==3] <- "보통"
data$survey2[data$survey==4] <- "불만족"
data$survey2[data$survey==5] <- "매우불만족"
# 3. 교차분할표 작성
table(data$method2, data$survey2)  # 교차표 생성 -> table(행,열)
#         만족 매우만족 매우불만족 보통 불만족
# 방법1    8        5          6   15     16 -> 50
# 방법2   14        8          6   11     11 -> 50
# 방법3    7        8          9   11     15 -> 50
# 주의 : 반드시 각 집단별 길이(50)가 같아야 한다.
# 4. 동질성 검정 - 모수 특성치에 대한 추론검정
chisq.test(data$method2, data$survey2)
#       Pearson's Chi-squared test
#data:  data$method2 and data$survey2
#X-squared = 6.5447, df = 8, p-value = 0.5865
# 5. 동질성 검정 해석
# --------------------------------------------------------------------------
# <동질성 검정 관련 연습문제>
# --------------------------------------------------------------------------
setwd("c:/Rwork/Part-III")
smoke <- read.csv("smoke.csv", header=TRUE)
head(smoke)
smoke$education2[education=1] <- "대졸"
smoke$education2[education=2] <- "고졸"
smoke$education2[education=3] <- "중졸"
head(smoke)
smoke$smoking2[smoking=1] <- "과다흡연"
smoke$smoking2[smoking=2] <- "보통흡연"
smoke$smoking2[smoking=3] <- "비흡연"
head(smoke)
CrossTable(smoke$education2,smoke$smoking2)
table(smoke$education2, smoke$smoking2)  # 교차표 생성 -> table(행,열)
chisq.test(smoke$education2, smoke$smoking2)
setwd("c:/Rwork/Part-III")
smoke <- read.csv("smoke.csv", header=TRUE)
head(smoke)
# [단계 2] 코딩 변경(변수 리코딩)
#education(독립변수) : 1:대졸, 2:고졸, 3:중졸
#smoke(종속변수): 1:과다흡연, 2:보통흡연, 3:비흡연
smoke$education2[education=1] <- "대졸"
smoke$education2[education=2] <- "고졸"
smoke$education2[education=3] <- "중졸"
smoke$smoking2[smoking=1] <- "과다흡연"
smoke$smoking2[smoking=2] <- "보통흡연"
smoke$smoking2[smoking=3] <- "비흡연"
head(smoke)
#[단계 3] 교차분할표 작성
CrossTable(smoke$education2,smoke$smoking2)
table(smoke$education2, smoke$smoking2)  # 교차표 생성 -> table(행,열)
smoke$education2[education=1] <- "대졸"
smoke$education2[education=2] <- "고졸"
smoke$education2[education=3] <- "중졸"
smoke$smoking2[smoking=1] <- "과다흡연"
smoke$smoking2[smoking=2] <- "보통흡연"
smoke$smoking2[smoking=3] <- "비흡연"
head(smoke)
table(smoke$education2, smoke$smoking2)  # 교차표 생성 -> table(행,열)
CrossTable(smoke$education2,smoke$smoking2)
install.packages("lattice")
library(lattice)
install.packages("mlmRev")
library(mlmRev)
data(Chem97) # Chem97 데이터 셋 로드
str(Chem97) # 차원보기
head(Chem97,30)
# 1.histogram : 변수 대상으로 백분율 적용 히스토그램 생성
# 형식1) (~x축, dataframe)
histogram(~gcsescore, data=Chem97)
histogram(~gcsescore | score, data=Chem97)
histogram(~gcsescore | factor(score), data=Chem97)
# 2.densityplot : 밀도 그래프
# 형식) (~x축 | 조건, dataframe, groups=변수)
densityplot(~gcsescore | factor(score), data=Chem97,
groups = gender, plot.points=T, auto.key = T)
densityplot(~gcsescore | factor(score), data=Chem97,
groups = gender, plot.points=T, auto.key = T)
data(VADeaths)
VADeaths
str(VADeaths)
# 2) 데이터셋 구조보기
mode(VADeaths) # numeric
class(VADeaths) # matrix
# 3) 데이터 리모델링(함수에서 데이터 처리 목적)
# (1) matrix -> data.frame 변환
df <- as.data.frame(VADeaths)
str(df)
class(df)
df
# (2) matrix -> data.table 변환
dft <- as.data.frame.table(VADeaths)
str(dft)
class(dft)
dft
# 3.barchart : 막대 그래프
# 형식) (y~x | 조건, dataframe, layout)
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(4,1))
# 4.dotplot : 점 그래프
# 형식) (y~x | 조건 , dataframe, layout)
dotplot(Var1 ~ Freq | Var2 , dft)
# Var2변수 단위(그룹화)로 점을 연결하여 플로팅
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o",
auto.key=list(space="right", points=T, lines=T))
# 5.xyplot : xyplot()함수 확장
# 형식) (y축~x축| 조건, dataframe or list)
library(datasets)
str(airquality) # airqulity 테이터 셋 로드
# airquality의 Ozone(y),Wind(x) 산점도 플로팅
xyplot(Ozone ~ Wind, data=airquality)
# Month변수 단위로 플로팅
xyplot(Ozone ~ Wind | Month, data=airquality)
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
head(quakes) # quakes 데이터셋 로드
str(quakes)
# 지진발생 위치(위도와 경로)
xyplot(lat~long, data=quakes, pch=".")
# 그래프를 변수에 저장
tplot<-xyplot(lat~long, data=quakes, pch=".")
# 그래프에 제목 추가
tplot2<-update(tplot,
main="1964년 이후 태평양에서 발생한 지진위치")
print(tplot2)
# 6. equal.count() : 지정된 범위 대상 영역구분과 카운팅
# 형식) equal.count(data, number, overlap)
# (1) 지진의 깊이를 3영역으로 구분하여 카운팅
depthgroup<-equal.count(quakes$depth, number=3, overlap=0)
depthgroup
# (2) depthgroup변수 기준으로 플로팅
xyplot(lat ~ long | depthgroup, data=quakes,
main="Fiji Earthquakes(depthgruop)",
ylab="latitude", xlab="longitude", pch="@", col='red' )
# --------------------------------------------------------------------------
# <연습문제1> lattice 패키지 관련
# --------------------------------------------------------------------------
# 7.cloud() :  3차원(위도, 경도, 깊이) 산점도 그래프
cloud(depth ~ lat * long , data=quakes,
zlim=rev(range(quakes$depth)),
xlab="경도", ylab="위도", zlab="깊이")
install.packages("latticeExtra")
library(latticeExtra)
data(SeatacWeather) # latticeExtra 데이터
SeatacWeather
str(SeatacWeather)
# --------------------------------------------------------------------------
# <연습문제2> lattice 패키지 관련
# --------------------------------------------------------------------------
# 주요 함수
# (1) y축:강수량(precip) ~ x축:일(day) | 조건:월(month) , 직선 그래프(type="h")
rain <- xyplot(precip ~ day | month, data=SeatacWeather, type="h")
print(rain) # 월별 강수량 직선 그래프
# (2) y축(최저기온+최고기온)~x축:일(day) | 조건월(month), 선그래프(type="l")
temp <- xyplot(min.temp + max.temp ~ day | month,
data=SeatacWeather, type="l", layout=c(3,1)) # type=line
print(temp)
# (3) 기온(2)과 강수량(1) 그래프 통합-doubleYScale(latticeExtra 제공)
doubleYScale(temp, rain,  style1=0, style2=3, add.ylab2=T,
text=c("min", "max", "rain"), columns=3)
# layout : temp 기준
# 왼쪽 y축 style(style1=0), 오른쪽 y축 style(style2=3),
# 왼쪽 y축이름(min.temp + max.temp)
# add.ylab2=T : 오른쪽 Y축이름(precip), text : 범례 추가
# 직전 그래프에 색상 추가
update(trellis.last.object(),
par.settings=simpleTheme(col=c("green","red","blue")))
# 2. ecdfplot() : 누적분포함수 결과 그래프 생성
library(ggplot2)
data(diamonds) # 데이터 셋 가져오기
data(mtcars)
data(mpg)
str(mpg) # map 데이터 셋 구조 보기
head(mpg) # map 데이터 셋 내용 보기
summary(mpg) # 요약 통계량
table(mpg$drv) # 구동방식 빈도수
# 1. qplot() 함수
# (1) 1개 변수 대상 기본 - 속이 꼭찬 막대 모양의 세로막대 그래프
qplot(hwy, data=mpg) # 세로막대 그래프
data(mtcars)
data(mpg)
str(mpg) # map 데이터 셋 구조 보기
head(mpg) # map 데이터 셋 내용 보기
summary(mpg) # 요약 통계량
table(mpg$drv) # 구동방식 빈도수
# 1. qplot() 함수
# (1) 1개 변수 대상 기본 - 속이 꼭찬 막대 모양의 세로막대 그래프
qplot(hwy, data=mpg) # 세로막대 그래프
#  fill 옵션 : hwy 변수를 대상으로 drv변수에 색 채우기(누적 막대그래프)
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용
# binwidth 옵션 : 막대 폭 지정 옵션
qplot(hwy, data=mpg, fill=drv, binwidth=2) # binwidth 옵션 적용
# facets 옵션 : drv변수 값으로 칼럼단위와 행 단위로 패널 생성
qplot(hwy, data=mpg, fill=drv, facets=.~ drv, binwidth=2) # 열 단위 패널 생성
qplot(hwy, data=mpg, fill=drv, facets=drv~., binwidth=2) # 행 단위 패널 생성
# (2) 2변수 대상 기본 - 속이 꽉찬 점 모양과 점의 크기는 1를 갖는 산점도 그래프
qplot(displ, hwy, data=mpg)# mpg 데이터셋의 displ과 hwy변수 이용
# displ, hwy 변수 대상으로 drv변수값으로 색상 적용 산점도 그래프
qplot(displ, hwy, data=mpg, color=drv)
# (3) 색상, 크기, 모양 적용
### ggplot2 패키지 제공 데이터 셋
head(mtcars)
str(mtcars) # ggplot2에서 제공하는 데이터 셋
qplot(wt, mpg, data=mtcars, color=factor(carb)) # 색상 적용
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb)) # 크기 적용
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb), shape=factor(cyl))#모양 적용
mtcars$qsec
# (4) geom 옵션
### ggplot2 패키지 제공 데이터 셋
head(diamonds)
# geom="bar" -> clarity변수 대상 cut변수로 색 채우기
qplot(clarity, data=diamonds, fill=cut, geom="bar") # 레이아웃에 색 채우기
qplot(clarity, data=diamonds, colour=cut, geom="bar") # 테두리 색 적용
# geom="point"
qplot(wt, mpg, data=mtcars, size=qsec) # geom="point" 기본
qplot(wt, mpg, data=mtcars, size=qsec, geom="point")
# cyl 변수의 요인으로 point 크기 적용, carb 변수의 요인으로 포인트 색 적용
qplot(wt, mpg, data=mtcars, size=factor(cyl), color=factor(carb), geom="point")
# qsec변수로 포인트 크기 적용, cyl 변수의 요인으로 point 모양 적용
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb), shape=factor(cyl), geom="point")
# geom="smooth"
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"))
qplot(wt, mpg, data=mtcars, color=factor(cyl), geom=c("point", "smooth"))
# cyl변수 요인으로 색상 적용
# geom="line"
qplot(mpg, wt, data=mtcars, color=factor(cyl), geom="line")
qplot(mpg, wt, data=mtcars, color=factor(cyl), geom="point") + geom_line()
#  geom="freqpoly"
qplot(clarity, data=diamonds, geom="freqpoly", group=cut, colour=cut)
# (5) position 옵션
# 다양한 bar 차트 유형("identity",stacked, dodged, identity)
# 채우기-가장 큰 값을 기준으로 채우기형 막대그래프
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="identity")
# 채우기-가장 적은 값을 기준으로 채우기형 막대그래프
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="fill")
# 스택형태-누적형-기본형
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="stack")
# 다지-살짝 비키다
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="dodge")
# 2. ggplot()함수
# (1) aes(x,y,color) 옵션
# aes(x,y,color) 속성 = aesthetics : 미학
p <-ggplot(diamonds, aes(carat, price, color=cut))
p + geom_point() # point 추가
# (2) geom_line() 레이어 추가
p<- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p+geom_line() # line 추가
# (3) geom_point()함수  레이어 추가
p<- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p+geom_point()  # point 추가
# (4) geom_step() 레이어 추가
p<- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p+geom_step()  # step 추가
# (5) geom_bar() 레이어 추가
p<- ggplot(diamonds, aes(clarity))
p+geom_bar(aes(fill=cut), position="fill")  # bar 추가
# --------------------------------------------------------------------------
# <연습문제3> ggplot2 패키지 관련
# --------------------------------------------------------------------------
# 3. ggsave()함수 : save image of plot on disk
p<-ggplot(diamonds, aes(carat, price, color=cut))
p+geom_point()  # point 추가
ggsave(file="C:/Rwork/output/diamond_price.pdf") # 가장 최근 그래프 저장
ggsave(file="C:/Rwork/output/diamond_price.jpg", dpi=72)
# 변수에 저장된 그래프 저장
p<- ggplot(diamonds, aes(clarity))
p<- p+geom_bar(aes(fill=cut), position="fill")  # bar 추가
ggsave(file="C:/Rwork/output/bar.png", plot=p, width=10, height=5)
library(ggplot2)
install.packages("ggmap") # ‘ggmap’와 ‘ggplot2’(우선 설치) 관련 패키지
library(ggmap)
# 1. get_googlemap() 함수
#  지도위치정보를 이용하여 지도정보를 생성하고, 지도 이미지 그리기
#(e.g. "1600 pennsylvania avenue, washington dc" or "Baylor University")
# (1) 지도위치정보 가져오기
gc<- geocode("seoul, korea", source="google") # geolocation API 이용
center <- as.numeric(gc)
center # 위도,경도
gc<- geocode("seoul, korea", source="google") # geolocation API 이용
center <- as.numeric(gc)
center # 위도,경도
#(2) 지도 정보 생성하기
map <- get_googlemap(center = center, language="ko-KR", color = "bw", scale = 2 )
# bw :  black-and-white - 흰색 바탕에 검은색 글자
# scale :  1, 2, or 4 (scale = 2 : 1280x1280 pixels)
# (3) 지도 이미지 그리기
ggmap(map, extent = 'device')
# extent : 지도가 그려질 크기를 지정하는 옵션
#  ("normal", "device", or "panel" (default))
# [실습] round(), get_googlemap()함수
#-------------------------------------------------
# (1) markers 데이터프레임 생성 -> round 적용
df <- round(data.frame( x = jitter(rep(-95.36, 25), amount = .3),
y = jitter(rep(29.76, 25), amount = .3) ), digits = 2)
# (2) 지도 위에 markers 적용
map <- get_googlemap('houston', markers = df, scale = 2)
ggmap(map, extent = 'device')
#-------------------------------------------------
# 2.  get_map함수
map <- get_map(location ="london", zoom=14, maptype='roadmap', scale=2)
# get_map("중심지역", 확대비율, 지도유형) : ggmap에서 제공하는 함수
ggmap(map, size=c(600,600), extent='device')
map <- get_map(location ="seoul", zoom=14, maptype='watercolor', scale=2)
ggmap(map, size=c(600,600), extent='device')
# zoom 차이
map <- get_map(location ="seoul", zoom=14, scale=2)
map <- get_map(location ="seoul", zoom=8, scale=2)
ggmap(map, size=c(600,600), extent='device')
# source 차이
map <- get_map(location = "texas", zoom = 6, source = "stamen")
# stamen : maptype='satellite' 지원 안됨
map <- get_map(location ="seoul", source = "osm", zoom=8, maptype='watercolor')
ggmap(map, size=c(600,600), extent='device')
map <- get_map(location = "seoul",zoom=14)
ggmap(map, size=c(600,600), extent='device')
# 3. 레이어 적용
# 실습 데이터-서울지역 4년제 대학교 위치 표시
university <- read.csv("C:/Rwork/Part-III/university.csv",header=T)
university # # 학교명","LAT","LON"
# (1)레이어1 : 정적 지도 생성
kor <- get_map("seoul", zoom=11, maptype = "watercolor")#roadmap
# maptype : roadmap, satellite, terrain, hybrid
# (2)레이어2 : 지도위에 포인트
ggmap(kor)+geom_point(data=university, aes(x=LON, y=LAT,color=factor(학교명)),size=3)
kor.map <- ggmap(kor)+geom_point(data=university, aes(x=LON, y=LAT,color=factor(학교명)),size=3)
# (3)레이어3 : 지도위에 텍스트 추가
kor.map + geom_text(data=university, aes(x=LON+0.01, y=LAT+0.01,label=학교명),size=5)
# LAT+0.01 : 텍스트 위치(포인트의 0.01 위쪽)
# geom_text : 텍스트 추가
# (4)지도 저장
# 넓이, 폭 적용 파일 저장
ggsave("C:/Rwork/output/university1.png",width=10.24,height=7.68)
# 밀도 적용 파일 저장
ggsave("C:/Rwork/output/university2.png",dpi=1000) # 9.21 x 7.68 in image
# --------------------------------------------------------------------------
